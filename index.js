"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.flowMetaSchema = void 0;
exports.flowMetaSchema = { "$schema": "https://meta.json-schema.tools/", "title": "Flow Meta Schema", "description": "A standard way to define JSON-RPC flows.", "type": "object", "required": ["name", "stepProviders", "flow", "rpcflow"], "properties": { "rpcflow": { "$ref": "#/definitions/FlowVersion" }, "name": { "$ref": "#/definitions/FlowName" }, "stepProviders": { "$ref": "#/definitions/StepProviders" }, "description": { "$ref": "#/definitions/FlowDescription" }, "summary": { "$ref": "#/definitions/FlowSummary" }, "contextSchema": { "$ref": "#/definitions/JSONSchema" }, "context": { "$ref": "#/definitions/FlowContext" }, "flow": { "$ref": "#/definitions/Flow" }, "externalDocumentation": { "$ref": "#/definitions/FlowExternalDocumentationObject" } }, "definitions": { "FlowVersion": { "title": "FlowVersion", "description": "**REQUIRED**. This string MUST be the semantic version number of the Specification that the document uses.", "type": "string", "enum": ["0.0.0-development"] }, "FlowName": { "title": "FlowName", "description": "**REQUIRED**. Name of the Flow.", "type": "string", "examples": ["foobarbaz"] }, "Namespace": { "title": "Namespace", "type": "string" }, "Transport": { "title": "Transport", "type": "string", "enum": ["postmessageiframe", "postmessagewindow", "http", "websocket"] }, "Url": { "title": "Url", "type": "string", "format": "uri" }, "StepProvider": { "title": "StepProvider", "type": "object", "required": ["namespace", "transport", "url"], "properties": { "namespace": { "$ref": "#/definitions/Namespace" }, "transport": { "$ref": "#/definitions/Transport" }, "url": { "$ref": "#/definitions/Url" } } }, "StepProviders": { "title": "StepProviders", "type": "array", "items": { "$ref": "#/definitions/StepProvider" } }, "FlowDescription": { "title": "FlowDescription", "type": "string", "description": "Markdown description describing the specification extension." }, "FlowSummary": { "title": "FlowSummary", "type": "string", "description": "A short summary of what the flow is." }, "$id": { "title": "$id", "type": "string", "format": "uri-reference" }, "$schema": { "title": "$schema", "type": "string", "format": "uri" }, "$ref": { "title": "$ref", "type": "string", "format": "uri-reference" }, "$comment": { "title": "$comment", "type": "string" }, "title": { "title": "title", "type": "string" }, "description": { "title": "description", "type": "string" }, "AlwaysTrue": true, "readOnly": { "title": "readOnly", "type": "boolean", "default": false }, "examples": { "title": "examples", "type": "array", "items": true }, "multipleOf": { "title": "multipleOf", "type": "number", "exclusiveMinimum": 0 }, "maximum": { "title": "maximum", "type": "number" }, "exclusiveMaximum": { "title": "exclusiveMaximum", "type": "number" }, "minimum": { "title": "minimum", "type": "number" }, "exclusiveMinimum": { "title": "exclusiveMinimum", "type": "number" }, "nonNegativeInteger": { "title": "nonNegativeInteger", "type": "integer", "minimum": 0 }, "nonNegativeIntegerDefaultZero": { "title": "nonNegativeIntegerDefaultZero", "type": "integer", "minimum": 0, "default": 0 }, "pattern": { "title": "pattern", "type": "string", "format": "regex" }, "schemaArray": { "title": "schemaArray", "type": "array", "minItems": 1, "items": { "$ref": "#/definitions/JSONSchema" } }, "items": { "title": "items", "anyOf": [{ "$ref": "#/definitions/JSONSchema" }, { "$ref": "#/definitions/schemaArray" }], "default": true }, "uniqueItems": { "title": "uniqueItems", "type": "boolean", "default": false }, "string_doaGddGA": { "type": "string", "title": "string_doaGddGA" }, "stringArray": { "title": "stringArray", "type": "array", "items": { "$ref": "#/definitions/string_doaGddGA" }, "uniqueItems": true, "default": [] }, "definitions": { "title": "definitions", "type": "object", "additionalProperties": { "$ref": "#/definitions/JSONSchema" }, "default": {} }, "properties": { "title": "properties", "type": "object", "additionalProperties": { "$ref": "#/definitions/JSONSchema" }, "default": {} }, "patternProperties": { "title": "patternProperties", "type": "object", "additionalProperties": { "$ref": "#/definitions/JSONSchema" }, "propertyNames": { "title": "propertyNames", "format": "regex" }, "default": {} }, "dependenciesSet": { "title": "dependenciesSet", "anyOf": [{ "$ref": "#/definitions/JSONSchema" }, { "$ref": "#/definitions/stringArray" }] }, "dependencies": { "title": "dependencies", "type": "object", "additionalProperties": { "$ref": "#/definitions/dependenciesSet" } }, "enum": { "title": "enum", "type": "array", "items": true, "minItems": 1, "uniqueItems": true }, "simpleTypes": { "title": "simpleTypes", "enum": ["array", "boolean", "integer", "null", "number", "object", "string"] }, "arrayOfSimpleTypes": { "title": "arrayOfSimpleTypes", "type": "array", "items": { "$ref": "#/definitions/simpleTypes" }, "minItems": 1, "uniqueItems": true }, "type": { "title": "type", "anyOf": [{ "$ref": "#/definitions/simpleTypes" }, { "$ref": "#/definitions/arrayOfSimpleTypes" }] }, "format": { "title": "format", "type": "string" }, "contentMediaType": { "title": "contentMediaType", "type": "string" }, "contentEncoding": { "title": "contentEncoding", "type": "string" }, "JSONSchemaObject": { "title": "JSONSchemaObject", "type": "object", "properties": { "$id": { "$ref": "#/definitions/$id" }, "$schema": { "$ref": "#/definitions/$schema" }, "$ref": { "$ref": "#/definitions/$ref" }, "$comment": { "$ref": "#/definitions/$comment" }, "title": { "$ref": "#/definitions/title" }, "description": { "$ref": "#/definitions/description" }, "default": true, "readOnly": { "$ref": "#/definitions/readOnly" }, "examples": { "$ref": "#/definitions/examples" }, "multipleOf": { "$ref": "#/definitions/multipleOf" }, "maximum": { "$ref": "#/definitions/maximum" }, "exclusiveMaximum": { "$ref": "#/definitions/exclusiveMaximum" }, "minimum": { "$ref": "#/definitions/minimum" }, "exclusiveMinimum": { "$ref": "#/definitions/exclusiveMinimum" }, "maxLength": { "$ref": "#/definitions/nonNegativeInteger" }, "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefaultZero" }, "pattern": { "$ref": "#/definitions/pattern" }, "additionalItems": { "$ref": "#/definitions/JSONSchema" }, "items": { "$ref": "#/definitions/items" }, "maxItems": { "$ref": "#/definitions/nonNegativeInteger" }, "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefaultZero" }, "uniqueItems": { "$ref": "#/definitions/uniqueItems" }, "contains": { "$ref": "#/definitions/JSONSchema" }, "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" }, "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefaultZero" }, "required": { "$ref": "#/definitions/stringArray" }, "additionalProperties": { "$ref": "#/definitions/JSONSchema" }, "definitions": { "$ref": "#/definitions/definitions" }, "properties": { "$ref": "#/definitions/properties" }, "patternProperties": { "$ref": "#/definitions/patternProperties" }, "dependencies": { "$ref": "#/definitions/dependencies" }, "propertyNames": { "$ref": "#/definitions/JSONSchema" }, "const": true, "enum": { "$ref": "#/definitions/enum" }, "type": { "$ref": "#/definitions/type" }, "format": { "$ref": "#/definitions/format" }, "contentMediaType": { "$ref": "#/definitions/contentMediaType" }, "contentEncoding": { "$ref": "#/definitions/contentEncoding" }, "if": { "$ref": "#/definitions/JSONSchema" }, "then": { "$ref": "#/definitions/JSONSchema" }, "else": { "$ref": "#/definitions/JSONSchema" }, "allOf": { "$ref": "#/definitions/schemaArray" }, "anyOf": { "$ref": "#/definitions/schemaArray" }, "oneOf": { "$ref": "#/definitions/schemaArray" }, "not": { "$ref": "#/definitions/JSONSchema" } } }, "JSONSchemaBoolean": { "title": "JSONSchemaBoolean", "description": "Always valid if true. Never valid if false. Is constant.", "type": "boolean" }, "JSONSchema": { "$schema": "https://meta.json-schema.tools/", "$id": "https://meta.json-schema.tools/", "title": "JSONSchema", "default": {}, "oneOf": [{ "$ref": "#/definitions/JSONSchemaObject" }, { "$ref": "#/definitions/JSONSchemaBoolean" }] }, "FlowContext": { "title": "FlowContext", "description": "Additional context provided to the flow. If `contextSchema` exists, `context` **MUST** validate against it. Context can be used via the `\\\"${context.<path>}\\\"` [Runtime Expression](https://github.com/etclabscore/json-template-language#what-is-it-used-for)", "type": "object" }, "FlowMethod": { "title": "FlowMethod", "type": "string", "description": "**REQUIRED**. Canonical name for the method call." }, "object_HAgrRKSz": { "type": "object", "title": "object_HAgrRKSz" }, "setOfAnykhpArGaq": { "type": "array", "items": true, "title": "setOfAnykhpArGaq" }, "FlowParams": { "title": "FlowParams", "description": "A list of parameters to be called for this method.", "oneOf": [{ "$ref": "#/definitions/object_HAgrRKSz" }, { "$ref": "#/definitions/setOfAnykhpArGaq" }] }, "FlowObject": { "title": "FlowObject", "type": "object", "required": ["method", "params"], "properties": { "method": { "$ref": "#/definitions/FlowMethod" }, "params": { "$ref": "#/definitions/FlowParams" } } }, "Flow": { "title": "Flow", "description": "Describes how to call JSON-RPC methods at runtime and use their results via [Runtime Expressions](https://github.com/etclabscore/json-template-language#what-is-it-used-for). Flow results can be used via \\\"${results.<keyName>}\\\" where `keyName` refers to the key of the flow object to use the results from.", "type": "object", "patternProperties": { "": { "$ref": "#/definitions/FlowObject" } } }, "FlowExternalDocumentationObjectDescription": { "title": "FlowExternalDocumentationObjectDescription", "description": "A verbose explanation of the target documentation. GitHub Flavored Markdown syntax MAY be used for rich text representation.", "summary": "External documentation description.", "type": "string" }, "FlowExternalDocumentationObjectUrl": { "title": "FlowExternalDocumentationObjectUrl", "description": "**REQUIRED**. The URL for the target documentation. Value MUST be in the format of a URL.", "summary": "External Documentation URI.", "type": "string", "format": "uri" }, "FlowExternalDocumentationObject": { "title": "FlowExternalDocumentationObject", "type": "object", "additionalProperties": false, "summary": "Information about external documentation.", "description": "Allows referencing an external resource for extended documentation.", "required": ["url"], "properties": { "description": { "$ref": "#/definitions/FlowExternalDocumentationObjectDescription" }, "url": { "$ref": "#/definitions/FlowExternalDocumentationObjectUrl" } } } } };
exports.default = exports.flowMetaSchema;
